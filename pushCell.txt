    def pushCell(self, row, column):
        """Reveals the cell and neighbour cells"""
        #Return early if the cell is already visible
        if self.cells[row][column].visible:
            return
        #Return early if stepped on a mine
        if self.cells[row][column].value >= 9:
            self.youLose()
            return
        self.cells[row][column].visible = True
        #Return early if player won
        self.remainingCoveredCells -= 1
        if self.remainingCoveredCells == self.mines:
            self.youWin()
            self.showAllCells()
            tkinter.messagebox.showinfo("Game over","You Win!!!")
            return
        #Turn the button into a label
        self.cells[row][column].button.destroy()
        self.cells[row][column].button = None
        self.cells[row][column].label = tkinter.Label(window, text=str(self.cells[row][column].value))
        self.cells[row][column].label.grid(row = row, column = column)
        #Trigger neighbour cells
        if self.cells[row][column].value == 0:
            if row - 1 in range(self.rows) and column - 1 in range(self.columns):
                self.pushCell(row - 1, column - 1)
            if row - 1 in range(self.rows):
                self.pushCell(row - 1, column)
            if row - 1 in range(self.rows) and column + 1 in range(self.columns):
                self.pushCell(row - 1, column + 1)
            if column - 1 in range(self.columns):
                self.pushCell(row, column - 1)
            if column + 1 in range(self.columns):
                self.pushCell(row, column + 1)
            if row + 1 in range(self.rows) and column - 1 in range(self.columns):
                self.pushCell(row + 1, column - 1)
            if row + 1 in range(self.rows):
                self.pushCell(row + 1, column)
            if row + 1 in range(self.rows) and column + 1 in range(self.columns):
                self.pushCell(row + 1, column + 1)
                
    def rightClick(self, row, column):
        self.cells[row][column].button.configure(bg="red")
        self.cells[row][column].button.unbind('<Button-1>')
        self.cells[row][column].button.bind('<Button-3>', lambda event, row = row, column = column: self.secondRightClick(row, column))
    
    def secondRightClick(self, row, column):
        self.cells[row][column].button.bind('<Button-1>', lambda event, row = row, column = column: self.pushCell(row, column))
        self.cells[row][column].button.bind('<Button-3>', lambda event, row = row, column = column: self.rightClick(row, column))
        self.cells[row][column].button.configure(bg="SystemButtonFace")